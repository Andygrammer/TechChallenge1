@page "/Newpost"
@using WebBlazor.Interfaces;
@using WebBlazor.Models;
@inject IJSRuntime JS
@inject IPostagemService PostagemService
@inject Blazored.LocalStorage.ILocalStorageService localStorage
@inject NavigationManager NavigationManager

<div class="newpostMainDiv">
    <img @ref="previewImageElem" />
    <label for="file-input" class="AddPhoto" style="@StyleForNumber()" hidden="@HideLabel">
        <MudIcon Icon="@Icons.Material.Outlined.CameraAlt" Title="Camera" Style="font-size: 4rem;" />
        Clique para adicionar a Imagem
        <InputFile @ref="inputFile" type="file" OnChange="@ShowPreview" name="my-image" id="file-input" accept="image/jpeg, image/png" style="display:none" />
    </label>
    
    <textarea class="legendaInput" @bind="textAreaValue" placeholder="Adicione uma legenda" />
</div>

<button @onclick="CreatePostagem">
    <AppFooter linkText="Postar"  linkDestination="/" IconName="@Icons.Material.Filled.Check" />
</button>

@code {

    private InputFile? inputFile;
    private ElementReference previewImageElem;
    private Lazy<IJSObjectReference> ExampleModule = new();
    private bool HideLabel { get; set; } = false;
    private string textAreaValue = "";
    private string Photo64 = "";
    private long maxFileSize = 10000000;
    private string nameImage = "";

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender) ExampleModule = new(await JS.InvokeAsync<IJSObjectReference>("import", "./InteropFunctions.js"));
    }

    private async Task ShowPreview(InputFileChangeEventArgs e)
    {
        await JS.InvokeVoidAsync("previewImage", inputFile!.Element, previewImageElem);
        HideLabel = !HideLabel;

        using (Stream reader = e.File.OpenReadStream(maxFileSize))
        {
            nameImage = e.File.Name;
            byte[] buffer = new byte[reader.Length];
            await reader.ReadAsync(buffer, 0, (int)reader.Length);
            Photo64 = Convert.ToBase64String(buffer);
        }
    }

    private string StyleForNumber()
    {
        return HideLabel ? "visibility: hidden; height: 0px;" : "visibility: display";
    }

    public async void CreatePostagem()
    {
        var postagem = await MontarPostagemDto();

        await PostagemService.CreatePostagemAsync(postagem);
        NavigationManager.NavigateTo(NavigationManager.Uri, forceLoad: true);
    }

    private async Task<PostagemDto> MontarPostagemDto()
    {
        PostagemDto postagem = new PostagemDto();
        postagem.Autor = await localStorage.GetItemAsync<string>("AvatarName");
        postagem.Imagem = Photo64;
        postagem.NomeImagem = nameImage;
        postagem.Legenda = textAreaValue;
        postagem.DataHora = DateTime.Now;
        
        return postagem;
    }
}
